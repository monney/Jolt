{
  "name": "Jolt",
  "tagline": "An intelligent alarm system for students",
  "body": "Overview\r\n========\r\n\r\nOur iOS app Nap Time will use the Apple Watch’s heart rate monitor and accelerometer to determine if a student has inadvertently fallen asleep and then vibrate and/or play an alarm if they have.\r\n\r\nRequirements and Target Audiences\r\n=================================\r\n\r\nTarget Audience\r\n---------------\r\n\r\nThe target audience will be college students who need to stay awake while studying or for an important event.\r\n\r\nKey User Benefits\r\n-----------------\r\n\r\nThe ability to...\r\n\r\n-   Wake up shortly after inadvertently falling asleep\r\n\r\n-   Schedule an interval of allowable sleep time\r\n\r\n-   Contact friends to wake you up in the case of important events\r\n\r\nSystem Improvements\r\n-------------------\r\n\r\nThe current systems are geared towards drivers who are falling asleep at the wheel. The primary flaw with this is that to be useful in this situation you need to detect sleep within milliseconds, which is infeasible by most methods. With non life-threatening situations the tolerance for error is much higher. Other iOS apps to track sleep are designed for all night usage and monitoring sleep quality, but with most smart watches having a single day’s battery life, you lose the critical function of charging while sleeping.\r\n\r\nFunctionality\r\n=============\r\n\r\nCommon Use Cases\r\n----------------\r\n\r\n-   **Our student “Joe” has finals and hasn’t been able to get much sleep over the past week, but he really needs to study.**\r\n\r\n    Joe activates the app and sets it to monitor his activity while he is studying. If he accidentally falls asleep while he is studying, the app will detect this and wake him up.\r\n\r\n-   **Joe needs to sleep and can’t study anymore, he doesn’t think he can fall asleep right now. But, if he does, he wants to sleep for thirty minutes**\r\n\r\n    Joe sets the app to monitor his activity, once we detect that Joe has been sleeping for thirty minutes, we will wake him up.\r\n\r\n-   **Joe is in lecture but it’s at 8am and he stayed up late studying**\r\n\r\n    Joe activates the app while he is in lecture and the watch will silently vibrate and wake Joe up if he falls asleep.\r\n\r\n-   **Joe is a heavy sleeper and he needs to be up for a midterm**\r\n\r\n    Joe adds the time of his exam to our app, we will detect if he is sleeping before he needs to be at his exam and attempt to wake him up with an alarm if he is. If we are unable to, we will send a message to a designated friend informing them of this.\r\n\r\nDesign\r\n======\r\n\r\nFront-End\r\n---------\r\n\r\nThe front-end will be designed in Photoshop and built in Xcode with AutoLayout.\r\n\r\nFront-End Back-End Connection\r\n-----------------------------\r\n\r\nThe front-end will connect to the back-end through segue’s and notification centers.\r\n\r\nBack-End\r\n--------\r\n\r\nThe back-end will be created in Swift and use WatchKit and HealthKit.\r\n\r\nBack-End Database Connection\r\n----------------------------\r\n\r\nThe back-end will connect to the database through SQL calls and Cocoa library calls.\r\n\r\nDatabase\r\n--------\r\n\r\nThe database will be implemented using Core Data and SQLite. The backend will store data used to help with making accurate sleep predictions.\r\n\r\nTesting\r\n-------\r\n\r\nTesting will consist of unit testing using Xcode, functional testing by manually testing on the Apple Watch, and user testing by having potential users test the app.\r\n\r\nMiscellaneous\r\n-------------\r\n\r\nThe tools chosen are standard for iOS wearables development.\r\n\r\nTimeline\r\n========\r\n\r\n-   March 21 - Finish Learning Swift/AutoLayout, WatchKit, HealthKit, and have the app framework setup. Project status website will be complete and live.\r\n\r\n-   March 28 - Review proposed UI/UX designs for the app and tweak as needed. Start the process of obtaining beta testing status with TestFlight.\r\n\r\n-   April 4 - Implement heart rate monitoring and work on accurately interpreting this as a sleep measurement. Implement UI for wakefulness monitoring.\r\n\r\n-   April 11 - Implement Accelerometer measurements and interpret these as a sleep measurement. Implement UI for nap interval timing.\r\n\r\n-   April 18 - Perform Battery Life testing to determine optimal sensor sample rates. Implement interface to schedule important events. Implement adding an emergency contact for important events. Present Alpha.\r\n\r\n-   April 25 - Perform Extensive Testing of the app by the dev team and user testing by potential users. Present Beta.\r\n\r\n-   May 2 - Tweak the UI and functionality based on bugs found and feedback from user testing. Present our app.\r\n\r\n-   May 10 - This week will be dedicated to correcting slippage from previous weeks and getting approval for launching on the app store.\r\n\r\nRisks and Outcomes\r\n==================\r\n\r\n-   App store approval takes a while so it likely won’t be launched by the end of the semester. This is not too big of a risk as we will be able to launch before next school year.\r\n\r\n-   Not many people currently have smart watches so the scope for the app will be limited initially. This will be solved as the appeal of smart watches grows and Apple launches the second version of the Apple Watch this fall (3 million additional units on college campuses alone).\r\n\r\n-   User testing will be difficult as not many people on campus have extensive experience with Smart Watch interfaces. This risk will be minimized by rigorously following Apple’s human interaction guidelines for wearable devices.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}